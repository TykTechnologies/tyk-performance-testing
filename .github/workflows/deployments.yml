name: Deployments Actions
on:
  workflow_dispatch:
    inputs:
      cloud:
        description: 'Choose Cloud Provider'
        required: true
        type: choice
        default: Azure
        options:
          - Azure
          - AWS
          - GCP
      action:
        description: 'Action'
        required: false
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      analytics_enabled:
        description: 'Enabled Analytics gathering'
        required: false
        default: false
        type: boolean
      auth_enabled:
        description: 'Enabled Authentication'
        required: false
        default: false
        type: boolean
      quota_enabled:
        description: 'Enabled Quota'
        required: false
        default: false
        type: boolean
      rate_limit_enabled:
        description: 'Enabled Rate Limiting'
        required: false
        default: false
        type: boolean
      open_telemetry_enabled:
        description: 'Enabled Open Telemetry'
        required: false
        default: false
        type: boolean
      open_telemetry_sampling_ratio:
        description: 'Open Telemetry Sampling Ratio'
        required: false
        type: string
        default: '0.5'
      tyk_version:
        description: 'Tyk Gateway version'
        required: true
        type: string
        default: 'v5.3.1'
      custom_deployment_descriptor:
        description: 'Custom Deployment Descriptor'
        required: true
        type: string
        default: 'deployments/main.tfvars.example'

env:
  provider: ${{ inputs.cloud == 'Azure' && 'aks' || (inputs.cloud == 'AWS' && 'eks' || 'gke') }}

concurrency:
  group: ${{ inputs.cloud }}

jobs:
  deployments:
    name: "${{ inputs.action }} ${{ inputs.cloud }} deployments"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AKS credentials
        if: ${{ inputs.cloud == 'Azure' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure AWS credentials
        if: ${{ inputs.cloud == 'AWS' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_CLUSTER_LOCATION }}

      - name: Authenticate into gcloud
        if: ${{ inputs.cloud == 'GCP' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI
        if: ${{ inputs.cloud == 'GCP' }}
        uses: google-github-actions/setup-gcloud@v2.1.0

      - name: Install gcloud k8s auth component
        if: ${{ inputs.cloud == 'GCP' }}
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.8.2"

      - name: Connect to AKS cluster
        if: ${{ inputs.cloud == 'Azure' }}
        run: |
          az aks get-credentials \
            --resource-group "pt-${{ vars.AZURE_CLUSTER_MACHINE_TYPE }}" \
            --name "pt-${{ vars.AZURE_CLUSTER_MACHINE_TYPE }}"

          kubectl config rename-context $(kubectl config current-context) performance-testing

      - name: Connect to EKS cluster
        if: ${{ inputs.cloud == 'AWS' }}
        run: |
          aws eks --region "${{ vars.AWS_CLUSTER_LOCATION }}" update-kubeconfig --name "pt-$(echo "${{ vars.AWS_CLUSTER_MACHINE_TYPE }}" | sed 's/\./-/g')"

          kubectl config rename-context $(kubectl config current-context) performance-testing

      - name: Connect to GKE cluster
        if: ${{ inputs.cloud == 'GCP' }}
        run: |
          gcloud container clusters get-credentials "pt-${{ vars.GCP_CLUSTER_MACHINE_TYPE }}" \
            --region "${{ vars.GCP_CLUSTER_LOCATION }}" \
            --project "${{ secrets.GCP_PROJECT }}"
          
          kubectl config rename-context $(kubectl config current-context) performance-testing

      - name: Create Terraform Cloud descriptor
        run: cp .github/${{ env.provider }}/deployments.tf deployments/terraform.cloud.tf

      - name: Copy Terraform descriptor
        run: cp ${{ inputs.custom_deployment_descriptor }} deployments/main.tfvars

      - name: Run Terraform action on deployments
        run: |
          cd deployments
          terraform init
          terraform ${{ inputs.action }} \
            --var-file=main.tfvars \
            --var="kubernetes_config_context=performance-testing" \
            --var="analytics_enabled=${{ inputs.analytics_enabled }}" \
            --var="auth_enabled=${{ inputs.auth_enabled }}" \
            --var="quota_enabled=${{ inputs.quota_enabled }}" \
            --var="rate_limit_enabled=${{ inputs.rate_limit_enabled }}" \
            --var="open_telemetry_enabled=${{ inputs.open_telemetry_enabled }}" \
            --var="open_telemetry_sampling_ratio=${{ inputs.open_telemetry_sampling_ratio }}" \
            --var="tyk_version=${{ inputs.tyk_version }}" \
            --var="tyk_license=${{ secrets.DASH_LICENSE }}" \
            --var="grafana_service_type=LoadBalancer" \
            --auto-approve

      - name: Access to Grafana Dashboard
        if: ${{ inputs.action == 'apply' }}
        run: |
          echo "###################################################################
          echo "#
          echo "# http://$(kubectl get svc -n dependencies grafana -ojsonpath='{.status.loadBalancer.ingress[0].ip}')"
          echo "# Username: admin"
          echo "# Password: topsecretpassword"
          echo "#
          echo "###################################################################
